# Instructions

User Spanish

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs.The following tools are available:

1.Screenshot Capture:

```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT][--width WIDTH][--height HEIGHT]
```

2.LLM Verification with Images:

```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path / to / screenshot.png
```

Example workflow:

```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider = "openai",  # or "anthropic"
    image_path = screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:

```
venv / bin / python./ tools / llm_api.py--prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
-OpenAI(default, model: gpt - 4o)

- Azure OpenAI(model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt - 4o - ms)
- DeepSeek(model: deepseek - chat)
- Anthropic(model: claude - 3 - sonnet - 20240229)
- Gemini(model: gemini - pro)
- Local LLM(model: Qwen / Qwen2.5 - 32B - Instruct - AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.

```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```

This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.

```
venv/bin/python ./tools/search_engine.py "your search keywords"
```

This will output the search results in the following format:

```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```

If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities

# Scratchpad

sql-sp-version-control: Guía detallada para el control de versiones de Stored Procedures usando un sistema de estado y registro de cambios. Ver sql-sp-version-control.md para más detalles.

# Reglas de patrón CRUD para modelos (API + Angular)

## Descripción general

Cuando se indique el nombre de un modelo (por ejemplo, "KitchenType"), debes replicar el siguiente workflow para implementar el CRUD completo, siguiendo el patrón de AgencyStatus/KitchenType. No inventes lógica nueva salvo que se indique explícitamente. Usa siempre las convenciones y estructuras existentes.

---

### 1. Backend (.NET + SQL Server)

#### 1.1. Base de Datos

- Crear la tabla en la base de datos siguiendo las convenciones de nombres y tipos.
- Crear los Stored Procedures para:
  - Insertar (Add)
  - Actualizar (Update)
  - Eliminar (Delete, preferentemente lógico)
  - Obtener por ID (GetById)
  - Listar todos (GetAll)
- Ubicar scripts en `Database/Tables/<Modelo>/` y `Database/Tables/<Modelo>/SP/`.

#### 1.2. Capa de Datos y Lógica

- Crear el modelo C# en `Models/Tables/`.
- Crear el DTO en `Models/DTO/` si aplica.
- Crear la interfaz y la implementación del repositorio en `Repositories/`.
- Crear el servicio correspondiente en `Services/`.
- Crear el controlador en `Controllers/`.
- Seguir el patrón de inyección de dependencias y manejo de errores.

---

### 2. Frontend (Angular)

#### 2.1. Estructura

- Crear un módulo bajo `src/app/modules/admin-portal/<modelo>/`.
- Incluir componentes para:
  - Listado (`list/`)
  - Alta (`add/`)
  - Edición (`edit/`)
- Crear el servicio Angular para consumir la API.

#### 2.2. Internacionalización

- Agregar traducciones en los archivos de i18n correspondientes.

#### 2.3. UI/UX

- Usar los componentes y estilos existentes (tablas, formularios, diálogos).
- Validar formularios y mostrar mensajes de error consistentes.

---

### 3. Pruebas

- Backend: Agregar pruebas unitarias para servicios y repositorios.
- Frontend: Agregar pruebas unitarias y de integración para componentes y servicios.

---

### 4. Documentación y Progreso

- Actualizar la documentación técnica si aplica.
- Registrar el avance en `progress.md` y actualizar el Memory Bank si corresponde.

---

### 5. Notas

- No inventar lógica nueva: replicar el patrón AgencyStatus/KitchenType.
- Si el modelo requiere lógica especial, documentarla explícitamente.
- Mantener la trazabilidad de cambios en el changelog correspondiente.

---

**Resumen:**
Al recibir el nombre de un modelo, ejecuta este workflow completo para implementar el CRUD en backend y frontend, siguiendo siempre las convenciones y estructuras existentes en el proyecto.
